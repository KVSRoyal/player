---
// https://github.com/lorenzolewis/starlight-utils/blob/main/packages/starlight-utils/components/Sidebar.astro
import Default from "@astrojs/starlight/components/Sidebar.astro";
import type { Props } from "@astrojs/starlight/props";
import { AstroError } from "astro/errors";

export type SidebarData = {
  isCurrentSidebar: boolean;
  starlightProps: Props;
  labelEntry: Props["sidebar"][number];
};

const multiSidebarData: Array<SidebarData> = Astro.props.sidebar.map(
  (entry) => {
    if (entry.type !== "group") {
      throw new AstroError(
        `\`${entry.label}\` cannot be used with multi-sidebar.

  Each top-level \`sidebar\` item in the Starlight config must be either a group or autogenerated.

  See https://starlight.astro.build/guides/sidebar/#groups and https://starlight.astro.build/guides/sidebar/#autogenerated-groups for more details.`
      );
    }

    // Recursively check if a group of sidebar entries contains the current page
    const findIfIsCurrent = (
      entry: (typeof Astro.props.sidebar)[number]
    ): boolean => {
      if (entry.type === "link") {
        return entry.isCurrent;
      }
      return entry.entries.some((item) => findIfIsCurrent(item));
    };

    const isCurrentPage = findIfIsCurrent(entry);

    return {
      isCurrentSidebar: isCurrentPage,
      starlightProps: { ...Astro.props, sidebar: [...entry.entries] },
      labelEntry: entry,
    };
  }
);

// If the current page being built is not on a sidebar then set the first sidebar to be shown
if (
  multiSidebarData[0] &&
  !multiSidebarData.some(({ isCurrentSidebar }) => isCurrentSidebar)
) {
  multiSidebarData[0].isCurrentSidebar = true;
}

const activeSidebar =
  multiSidebarData.find((s) => s.isCurrentSidebar) ?? multiSidebarData[0];

if (activeSidebar.labelEntry.type === "group") {
  activeSidebar.labelEntry.entries.forEach((entry) => {});
}
---

<Default {...Astro.props} sidebar={(activeSidebar.labelEntry as any).entries} />
